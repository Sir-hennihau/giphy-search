{"version":3,"sources":["Utils/giphy.ts","Utils/search.ts","Components/Grid/Components/GridItem/Components/gridEndMessage.tsx","Components/Grid/Components/GridItem/Components/gridItemStyledContainer.tsx","Components/Grid/Components/GridItem/Components/gridItemStyledAnchor.tsx","Components/Grid/Components/GridItem/Components/gridItemStyledImage.tsx","Components/Grid/Components/GridItem/gridItem.tsx","Components/Grid/Components/gridStyledContainer.tsx","Components/Grid/grid.tsx","Components/Headline/Components/headlineStyledHeadline.tsx","Components/Headline/headline.tsx","Components/SearchBar/Components/searchBarStyledInput.tsx","Components/SearchBar/Components/searchBarStyledInputContainer.tsx","Components/SearchBar/searchBar.tsx","Components/searchContextWrapper.tsx","Components/App/Components/appStyledContainer.tsx","Components/App/Components/appStyledHeader.tsx","Components/App/Components/appStyledMain.tsx","Components/App/app.tsx","index.tsx"],"names":["GIPHY_API_KEY","getGifs","offset","search","a","axios","get","params","api_key","gifsResponse","q","gifs","data","pagination","totalGifsCount","total_count","SEARCH_PLACEHOLDER_STRINGS","SearchContext","createContext","setSearch","GrindEndMessage","GridItemStyledContainer","styled","div","GridItemStyledAnchor","GridItemStyledImage","img","GridItem","gif","href","url","target","alt","title","src","images","preview_webp","GridStyledContainer","Grid","useContext","Context","useState","setGifs","setOffset","hasMoreGifs","setHasMoreGifs","setTotalGifsCount","useEffect","window","scrollTo","top","increaseOffset","onNext","length","newGifs","dataLength","endMessage","hasMore","loader","next","style","width","map","index","HeadlineStyledHeadline","h1","Headline","children","SearchBarStyledInput","input","SearchBarStyledInputContainer","nav","SearchBar","debouncedSetSearch","useCallback","debounce","onChange","event","value","placeholder","sample","SearchContextWrapper","searchContextValue","useMemo","Provider","AppStyledContainer","AppStyledHeader","header","AppStyledMain","main","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d2987a09.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { GifsResult } from \"@giphy/js-fetch-api\";\n\n/**\n * My giphy API key.\n * For the sake of simplicity, I will keep it stored in a const for now. It is a free development key with limited API usage.\n * In a production environment, keep this in a .env file for example.\n */\nexport const GIPHY_API_KEY = \"gzpMMyTKr2LO966A2JMxlOmnjnDix1MH\";\n\nexport const DEFAULT_GIPHY_PAGINATION_OFFSET = 50;\n\n/**\n * Network request to get GIFs from API.\n *\n * Either gets Giphy's trending GIFs or GIFs for a specific search query.\n *\n * @returns Promise of both GIF and pagination information.\n */\nexport const getGifs = async (offset: number, search?: string) => {\n  let gifsResponse;\n\n  if (!search || search === \"\") {\n    gifsResponse = await axios.get<GifsResult>(\n      \"https://api.giphy.com/v1/gifs/trending\",\n      {\n        params: { offset, api_key: GIPHY_API_KEY },\n      }\n    );\n  } else {\n    gifsResponse = await axios.get<GifsResult>(\n      \"https://api.giphy.com/v1/gifs/search\",\n      {\n        params: {\n          offset,\n          api_key: GIPHY_API_KEY,\n          q: search,\n        },\n      }\n    );\n  }\n\n  return {\n    gifs: gifsResponse.data.data,\n    offset: gifsResponse.data.pagination.offset,\n    totalGifsCount: gifsResponse.data.pagination.total_count,\n  };\n};\n","import { sample } from \"lodash\";\nimport { createContext } from \"react\";\n\nconst SEARCH_PLACEHOLDER_STRINGS = [\n  \"Search for your favourite tv show\",\n  '\"Vibing dogs\"',\n  \"Enter your name here\",\n  \"Find GIFs from Giphy\",\n  \"How do you feel today?\",\n];\n\n/**\n * @returns Random placeholder for search input.\n */\nexport const getSearchPlaceholderString = () =>\n  sample(SEARCH_PLACEHOLDER_STRINGS);\n\nexport const SearchContext = createContext<{\n  search: string;\n  setSearch: (search: string) => void;\n}>({ search: \"\", setSearch: (search) => undefined });\n","import React from \"react\";\n\nexport const GrindEndMessage = () => (\n  <h2>No gifs could be found for your search.</h2>\n);\n","import styled from \"styled-components\";\n\nexport const GridItemStyledContainer = styled.div`\n  align-items: center;\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  position: relative;\n  width: 100%;\n  z-index: 4;\n`;\n","import styled from \"styled-components\";\n\nexport const GridItemStyledAnchor = styled.a`\n  height: 100%;\n  width: 100%;\n`;\n","import styled from \"styled-components\";\n\nexport const GridItemStyledImage = styled.img`\n  width: 100%;\n`;\n","import React from \"react\";\nimport IGif from \"@giphy/js-types/dist/gif\";\nimport { GridItemStyledContainer } from \"./Components/gridItemStyledContainer\";\nimport { GridItemStyledAnchor } from \"./Components/gridItemStyledAnchor\";\nimport { GridItemStyledImage } from \"./Components/gridItemStyledImage\";\n\ninterface GridItemProps {\n  gif: IGif;\n}\n\n/**\n * Single item in the grid.\n * Can be clicked on to navigate to Giphys's website.\n */\nexport const GridItem = ({ gif }: GridItemProps) => (\n  <GridItemStyledContainer>\n    <GridItemStyledAnchor href={gif.url} target=\"_blank\">\n      <GridItemStyledImage alt={gif.title} src={gif.images.preview_webp.url} />\n    </GridItemStyledAnchor>\n  </GridItemStyledContainer>\n);\n","import styled from \"styled-components\";\n\nexport const GridStyledContainer = styled.div`\n  display: grid;\n  grid-gap: 25px;\n  grid-template-columns: auto auto auto;\n  width: 100%;\n\n  @media only screen and (max-width: 556px) {\n    grid-template-columns: auto;\n  }\n`;\n","import IGif from \"@giphy/js-types/dist/gif\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nimport { DEFAULT_GIPHY_PAGINATION_OFFSET, getGifs } from \"../../Utils/giphy\";\nimport { SearchContext as Context } from \"../../Utils/search\";\nimport { GrindEndMessage } from \"./Components/GridItem/Components/gridEndMessage\";\nimport { GridItem } from \"./Components/GridItem/gridItem\";\nimport { GridStyledContainer } from \"./Components/gridStyledContainer\";\n\n/**\n * Grid that displays searched GIFs. Supports infinite scrolling.\n */\nexport const Grid = () => {\n  // --- STATE ---\n\n  const { search } = useContext(Context);\n  const [gifs, setGifs] = useState<IGif[]>();\n\n  /**\n   * Describes Giphy's search API offset for GIF entries. Used for pagination.\n   */\n  const [offset, setOffset] = useState(0);\n\n  /**\n   * Describes wether API can deliver more search results for infinite scrolling.\n   */\n  const [hasMoreGifs, setHasMoreGifs] = useState(true);\n\n  /**\n   * Total GIF count that can be delivered by API.\n   */\n  const [totalGifsCount, setTotalGifsCount] = useState(0);\n\n  // --- EFFECTS ---\n\n  /**\n   * Handles search changes.\n   */\n  useEffect(() => {\n    window.scrollTo({ top: 0 });\n\n    (async () => {\n      const gifsResponse = await getGifs(0, search);\n\n      setGifs(gifsResponse.gifs);\n      increaseOffset();\n      setTotalGifsCount(gifsResponse.totalGifsCount);\n    })();\n  }, [search]);\n\n  // --- HELPERS ---\n\n  /**\n   * Callback function to invoke on reaching end of grid.\n   * Adds next GIFs into feed.\n   */\n  const onNext = async () => {\n    if (!gifs) {\n      return;\n    }\n\n    if (gifs.length + offset > totalGifsCount) {\n      return setHasMoreGifs(false);\n    }\n\n    const gifsResponse = await getGifs(offset, search);\n\n    const newGifs = [...gifs, ...gifsResponse.gifs];\n    setGifs(newGifs);\n    increaseOffset();\n  };\n\n  const increaseOffset = () =>\n    setOffset(offset + DEFAULT_GIPHY_PAGINATION_OFFSET);\n\n  // --- RENDER ---\n\n  if (gifs?.length === 0) {\n  }\n\n  return (\n    <InfiniteScroll\n      dataLength={gifs?.length || 0}\n      endMessage={<GrindEndMessage />}\n      hasMore={hasMoreGifs}\n      loader={<h2>Loading...</h2>}\n      next={onNext}\n      style={{ width: \"100%\" }}\n    >\n      <GridStyledContainer>\n        {gifs?.map((gif, index) => (\n          <GridItem gif={gif} key={index} />\n        ))}\n      </GridStyledContainer>\n    </InfiniteScroll>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const HeadlineStyledHeadline = styled.h1`\n  font-size: 50px;\n  margin-bottom: 25px;\n  text-align: center;\n`;\n","import React, { ReactNode } from \"react\";\n\nimport { HeadlineStyledHeadline } from \"./Components/headlineStyledHeadline\";\n\ninterface HeadlineProps {\n  children: ReactNode;\n}\n\nexport const Headline = ({ children }: HeadlineProps) => (\n  <HeadlineStyledHeadline>{children}</HeadlineStyledHeadline>\n);\n","import styled from \"styled-components\";\n\nexport const SearchBarStyledInput = styled.input`\n  background: #f2f2f2;\n  border-radius: 5px;\n  font-size: 20px;\n  margin: 25px 0;\n  padding: 10px;\n  width: 100%;\n`;\n","import styled from \"styled-components\";\n\nexport const SearchBarStyledInputContainer = styled.nav`\n  display: flex;\n  width: 100%;\n`;\n","import { debounce } from \"lodash\";\nimport React, { useCallback, useContext } from \"react\";\n\nimport { getSearchPlaceholderString, SearchContext } from \"../../Utils/search\";\nimport { SearchBarStyledInput } from \"./Components/searchBarStyledInput\";\nimport { SearchBarStyledInputContainer } from \"./Components/searchBarStyledInputContainer\";\n\nexport const SearchBar = () => {\n  // --- STATE ---\n\n  const { setSearch } = useContext(SearchContext);\n\n  // -- HELPERS ---\n\n  /*\n   * Debounce set search, because it will trigger an API call on every keystroke otherwise.\n   * We got API usage limits.\n   */\n  const debouncedSetSearch = useCallback(\n    debounce((search: string) => setSearch(search), 300),\n    [setSearch]\n  );\n\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    debouncedSetSearch(event.target.value);\n  };\n\n  // --- RENDER ---\n\n  return (\n    <SearchBarStyledInputContainer>\n      <SearchBarStyledInput\n        onChange={onChange}\n        placeholder={getSearchPlaceholderString()}\n      />\n    </SearchBarStyledInputContainer>\n  );\n};\n","import React, { ReactNode, useCallback, useMemo, useState } from \"react\";\nimport { SearchContext } from \"../Utils/search\";\n\ninterface SearchContextWrapperProps {\n  children: ReactNode;\n}\n\n/**\n * Wrapper component that manages search context.\n */\nexport const SearchContextWrapper = ({\n  children,\n}: SearchContextWrapperProps) => {\n  // --- STATE ---\n\n  const [search, setSearch] = useState(\"\");\n\n  // --- MEMOIZED ---\n\n  const searchContextValue = useMemo(() => ({ search, setSearch }), [search]);\n\n  // --- RENDER ---\n\n  return (\n    <SearchContext.Provider value={searchContextValue}>\n      {children}\n    </SearchContext.Provider>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const AppStyledContainer = styled.div`\n  padding: 20px;\n  width: 800px;\n`;\n","import styled from \"styled-components\";\n\nexport const AppStyledHeader = styled.header`\n  background: white;\n  padding: 20px 0;\n  position: sticky;\n  top: 0;\n  z-index: 5;\n`;\n","import styled from \"styled-components\";\n\nexport const AppStyledMain = styled.main`\n  display: flex;\n  justify-content: center;\n`;\n","import React from \"react\";\n\nimport { Grid } from \"../Grid/grid\";\nimport { Headline } from \"../Headline/headline\";\nimport { SearchBar } from \"../SearchBar/searchBar\";\nimport { SearchContextWrapper } from \"../searchContextWrapper\";\nimport { AppStyledContainer } from \"./Components/appStyledContainer\";\nimport { AppStyledHeader } from \"./Components/appStyledHeader\";\nimport { AppStyledMain } from \"./Components/appStyledMain\";\n\nexport const App = () => (\n  <SearchContextWrapper>\n    <AppStyledMain>\n      <AppStyledContainer>\n        <AppStyledHeader>\n          <Headline>Giphy Search</Headline>\n\n          <SearchBar />\n        </AppStyledHeader>\n\n        <Grid />\n      </AppStyledContainer>\n    </AppStyledMain>\n  </SearchContextWrapper>\n);\n","import \"./normalize.css\";\nimport \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { App } from \"./Components/App/app\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}